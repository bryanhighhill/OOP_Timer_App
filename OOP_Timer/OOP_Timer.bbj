
declare auto TimerApp app!
app! = new TimerApp()
app!.run()
end

class public TimerApp
    field protected BBjSysGui           sysgui!
    field protected BBjWebManager       webManager!
    
    REM 'Windows'
    field protected BBjTopLevelWindow   winMain!
    field protected BBjChildWindow      winInput!
    field protected BBjChildWindow      winBtn!
    field protected BBjChildWindow      winClock!
    field protected BBjChildWindow      winTimeColorIndicator!
    field protected BBjChildWindow      winClockRight!
    field protected BBjChildWindow      winClockLeft!
    field protected BBjChildWindow      winClockFace!

    REM 'Time variables'
    field protected BBjNumber           hours!
    field protected BBjNumber           minutes!
    field protected BBjNumber           seconds!
    field protected BBjNumber           remainingTimeInMS!
    field protected BBjNumber           hoursRemaining!
    field protected BBjNumber           minutesRemaining!
    field protected BBjNumber           secondsRemaining!
    
    REM 'Buttons & Inputs'
    field protected BBjInputNSpinner    hoursInput!
    field protected BBjInputNSpinner    minutesInput!
    field protected BBjInputNSpinner    secondsInput!
    field protected BBjButton           startBtn!
    field protected BBjButton           pauseBtn!
    field protected BBjButton           resumeBtn!
    field protected BBjButton           cancelBtn!


    REM 'Constructors'
    method public void TimerApp()
    
        rem Instatiate WebManager and inject CSS
        #webManager! = BBjAPI().getWebManager()
        css! = java.nio.file.Files.readAllBytes(java.nio.file.Path.of(dsk("")+dir("")+"stylesheet.css"))
        #webManager!.injectStyle(css!, 0, "name=timerapp_css")

    methodend    
    
    
    REM 'Run timer app'
    method public void run()
    
        rem Create UI
        #sysgui! = BBjAPI().openSysGui("X0")
        #createAppUI()
        process_events
        
    methodend
    
    
    REM 'create main app UI'
    method public void createAppUI()
    
        REM 'main window'
        title$ = "DWC Countdown Timer"
        #winMain! = #sysgui!.addWindow(title$, $01111000$)
        #winMain!.addClass("window")
        
        REM 'child windows'
        #winInput! = #winMain!.addChildWindow("", $00108800$, #sysgui!.getAvailableContext())
        #winInput!.addClass("input-bg")
        #winBtn! = #winMain!.addChildWindow("", $00108800$, #sysgui!.getAvailableContext())
        #winBtn!.addClass("button-window")
        
        REM 'inputs'
        #hoursInput! = #winInput!.addInputNSpinner($0020$, "##", 0, 23)
        #hoursInput!.addClass("input-spinner")
        #hoursInput!.setAttribute("label", "Hours")
        #minutesInput! = #winInput!.addInputNSpinner($0020$, "##", 0, 59)
        #minutesInput!.addClass("input-spinner")
        #minutesInput!.setAttribute("label", "Minutes")
        #secondsInput! = #winInput!.addInputNSpinner($0020$, "##", 0, 59)
        #secondsInput!.addClass("input-spinner")
        #secondsInput!.setAttribute("label", "Seconds") 
        
        REM 'buttons'
        rem 'start'
        #startBtn! = #winBtn!.addButton("Start")
        #startBtn!.setNoEdge(1)
        #startBtn!.addClass("start-button")
        
        rem 'resume'
        #resumeBtn! = #winBtn!.addButton("Resume")
        #resumeBtn!.setNoEdge(1)
        #resumeBtn!.addClass("resume-button")
        #resumeBtn!.setVisible(0)
        
        rem 'pause button'
        #pauseBtn! = #winBtn!.addButton("Pause")
        #pauseBtn!.setNoEdge(1)
        #pauseBtn!.addClass("pause-button")
        #pauseBtn!.setVisible(0)
        
        rem 'cancel button'
        #cancelBtn! = #winBtn!.addButton("Cancel")
        #cancelBtn!.setNoEdge(1)
        #cancelBtn!.addClass("cancel-button")
        #cancelBtn!.setVisible(0)


        REM 'callbacks'
        #winMain!.setCallback(#winMain!.ON_CLOSE,"eoj")
        #startBtn!.setCallback(#startBtn!.ON_BUTTON_PUSH, #this!, "onStart")
        #resumeBtn!.setCallback(#resumeBtn!.ON_BUTTON_PUSH, #this!, "onResume")
        #pauseBtn!.setCallback(#pauseBtn!.ON_BUTTON_PUSH, #this!, "onPause")
        #cancelBtn!.setCallback(#cancelBtn!.ON_BUTTON_PUSH, #this!, "onCancel")

    methodend
    
    
        REM 'START TIMER METHOD'
        method public void onStart(BBjButtonPushEvent e!)
REM             hours! = hoursInput!.getValue()
REM             minutes! = minutesInput!.getValue()
REM             seconds! = secondsInput!.getValue()
REM     
REM             REM 'variables used for repeat timer function'
REM             initialHours! = hours!
REM             initialMinutes! = minutes!
REM             initialSeconds! = seconds!
REM             
REM             REM 'check to see if user inputted any time else start timer'
REM             if (hours! = 0) AND (minutes! = 0) AND (seconds! = 0) then
REM                 noInputMessage! = msgbox("No Time Selected", 0 + 48, "Start Timer Error")
REM                 return
REM             else
REM                 if (startTime! = 0) then startTime! = TIM
REM                 startButton!.setVisible(0)
REM                 pauseButton!.setVisible(1)
REM                 cancelButton!.setVisible(1)
REM                 inputBG!.setVisible(0)
REM                 
REM                 REM 'time variables for clock css animations'
REM                 totalTimeInSec! = (hours! *  3600) + (minutes! * 60) + (seconds!)
REM                 halfTime! = totalTimeInSec! / 2
REM                 totalTimeString! = STR(totalTimeInSec!)
REM                 halfTimeString! = STR(halfTime!) 
REM         
REM                 REM 'UI'
REM                 clockContainer! = window!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
REM                 clockContainer!.addClass("clock-container")
REM             
REM                 timerColorIndicator! = clockContainer!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
REM                 timerColorIndicator!.addClass("timer-color-indicator")
REM             
REM                 clockRight! = timerColorIndicator!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
REM                 clockRight!.addClass("clock-right")
REM                 clockRight!.addClass("clock-rotate-end")
REM                 web!.injectStyle(".clock-rotate-end { "+
REM         :           "animation-delay: " + halfTimeString! + "s !important;"+
REM         :           "animation-duration: " + halfTimeString! + "s !important;"+
REM         :        "}")
REM             
REM                 clockLeft! = timerColorIndicator!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
REM                 clockLeft!.setBorderColor(transparent!)
REM                 clockLeft!.addClass("clock-left")
REM                 clockLeft!.addClass("clock-rotate-start")
REM                 
REM                 web!.injectStyle(".clock-rotate-start { "+
REM         :           "animation-delay: 0s, " + halfTimeString! + "s !important;"+
REM         :           "animation-duration: " + halfTimeString! + "s, 0s !important;"+
REM         :       "}")
REM                 
REM                 clockFace! = timerColorIndicator!.addChildWindow("", $00108800$, sysgui!.getAvailableContext())
REM                 clockFace!.addClass("clock-face")
REM                 
REM                 REM 'set one second timer to update time remaining'
REM                 bbj!.createTimer(oneSecTimer, 1, "calculateTime")
REM             endif
        methodend
        
        REM 'RESUME TIMER METHOD'
        method public void onResume(BBjButtonPushEvent e!)
        methodend
        
        REM 'PAUSE TIMER METHOD'
        method public void onPause(BBjButtonPushEvent e!)
        methodend
        
        REM 'CANCEL TIMER METHOD'
        method public void onCancel(BBjButtonPushEvent e!)
        methodend
    
        REM 'WINDOW CLOSE METHOD'
        method public void eoj()
        methodend
    
    
    
REM     
REM     
REM     
REM     
REM     constructor CountDownTimer(hours!, minutes!, seconds!)
REM         this.hours! = #hours!
REM         this.minutes! = #minutes!
REM         this.seconds! = #seconds!
REM         
REM     event listeners
REM         start ON_BUTTON_PUSH
REM         pause ON_BUTTON_PUSH
REM         stop ON_BUTTON_PUSH
REM         
REM     method run()
REM         create ui
REM         process_events
REM         
REM     method calculateTimeRemaining(totalTimeInMs)
REM         loop - i = total time; i >= 0; i--
REM         call method to display time(hoursRemaining, minutesRemaining, secondsRemaining)
REM         add onesecondtimer
REM         
REM         
REM     method displayTime(hoursRemaining, minutesRemaining, secondsRemaining)
REM         display time in proper format - hh:mm:ss
REM     
    classend
    
    
    